五大常用算法:

-------------------------------------------------------------------------
一、 [ 分治算法 ]:
  
   1. 基本概念
      在计算机科学中，分治法是一种很重要的算法。字面上的解释是"分而治之"。就是把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题....直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。 这个技巧是很高效算法的基础，如排序算法(快速排序、归并排序)，傅立叶变换(快速傅立叶变换)....

      任何一个可以用计算机求解的问题所需的计算时间都与其规模有关。问题的规模越小，越容易求解，解题所需的计算时间也越少。要想直接解决一个规模较大的问题，有时是相当困难的。

  2. 基本思想及策略
     分治法的设计思想是: 将一个难以直接解决的大问题，分割成一些规模较小的相同问题，以便各个击破，分而治之。
     分治的策略是: 对一个规模为n的问题，若该问题可以很容易地解决则直接解决，否则将其分解为k个规模较小的子问题，这些子问题互相独立且与原问题形式相同，递归地解决这些子问题，然后将各个子问题的解合并得到原问题的解。
     如果原问题可以分割成k个子问题，1<k<=n，且这些子问题都可解并可利用这些子问题的解求出原问题的解，那么这种分治法是可行的。由分治法产生的子问题往往是原问题的较小规模，就这就使用递归技术提供了方便。在这种情况下，反复应用分治手段，可以使子问题与原问题类型一致而其规模却不断缩小，最终使子问题缩小到很容易直接求出解。这自然导致递归过程的产生，分治与递归像一地孪生兄弟，经常同时应用在算法设计中，并由此产生许多高效算法。

  3. 分治法适用的情况
     分治法所能解决的问题一般具有以下几个特性:
      + 该问题的规模缩小到一定的程序就可以很容易地解决
      + 该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质。
      + 利用该问题分解出的子问题的解可以合并为该问题的解
      + 该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子问题
      
     第一条特征是绝大多数问题都可以满足的，因为问题的计算复杂性一般是随着问题规模的增加而增加。
     第二条特征是应用分治法的前提，它也是大多数问题可以满足的，此特征反映了递归思想的应用
     第三条特征是关键，能否利用分治法完全取决于问题是否具有第三条特征，如果具备了第一条和第二条特征，而不具备第三条特征，则可以考虑用贪心法或动态规划法。
     第四条特征涉及到分治法的效率，如果各子问题是不独立的则分治法要做许多不必要的工作，重复地解公共的子问题，此时虽然可用分治法，但一般动态规划法较好。

  4. 分治法的基本步骤
     分治算法在每一层递归上有三个步骤:
      + Step 1 - 分解: 将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题
      + Step 2 - 解决: 若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题
      + Step 3 - 合并: 将各个子问题的解合并为原问题的解

     它的一般的算法设计模式如下:
       Divide-And-Conquer(P)
        <1>. if |p| <= n0
        <2>. then return(ADHOC(p))
        <3>. 将P分解为较小的问题 P1, P2, ..., Pk
        <4>. for i <-- 1 to k
        <5>. do yi <-- Divide-And-Conquer(Pi)   // 递归解决Pi
        <6>. T <-- MERGE(y1, y2, ..., yk)   // 合并子问题
        <7>. return (T)
     其中|P|表示问题P的规模; n0为一阈值，表示当问题P的规模不超过n0时，问题已容易直接解出，不必再继续分解。ADHOC(P)是该分治算法中的基本子算法，用于直接解小规模的问题P。MERGE(y1, y2, ..., yk)是该分治算法中的合并子算法，用于将P的子问题P1、P2...Pk的相应的解y1, y2, ..., yk 合并为P的解。

  5. 分治算法的复杂性分析
     一个分治法将规模为n的问题分成k个规模为n/m的子问题去解。设分解阀值n0=1，且ADHOC解规模为1的问题耗费1个单位的时间。再设将原问题分解为k个子问题以及用merge将k个子问题的解需用f(n)个单位时间。用T(n)表示该分治法解规模为|P|=n的问题所需的计算时间，则有:
       T(n) = k * T(n/m) + f(n)
     通过迭代法求得方程的解:
       递归方程及其解只给出n等于m的方幂时T(n)的值，但是如果认为T(n)足够平滑，那么由于n等于m的方幂时T(n)的值可以估计T(n)的增长速度。通常假定T(n)是单调上升的，从而当mi <= n < mi+1时，T(mi)<=T(n)<T(mi+1)
     
  6. 可使用分治法求解的一些经典问题
     + 二分搜索
     + 大整数乘法
     + Strassen矩阵乘法
     + 棋盘覆盖
     + 合并排序
     + 快速排序
     + 线性时间选择
     + 最接近点对问题
     + 循环赛日程表
     + 汉诺塔

  7. 依据分治法设计程序时的思维过程
     实际上就是类似于数学归纳法，找到解决本问题的求解方程公式，然后根据方程公式设计递归程序。
     之一是先找到最小问题规模时的求解方法，然后考虑随着问题增大时的求解方法，找到求解的递归函数后（各种规模或因子），设计递归程序即可。


-------------------------------------------------------------------------

二、 [ 动态规划算法 ]:
  
   1. 基本概念
      动态规划过程是: 每次决策依赖于当前状态，又随即引起状态的转移。一个决策序列就是在变化状态中产生出来的，所以，这种多阶段最优决策解决问题的过程就称为动态规划。

   2. 基本思想与策略
      基本思想与分治法类似，也是将待求解的问题分解为若干个子问题(阶段)，按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。
      由于动态规划解决的问题多数有重叠子问题这个特点，为减少重复计算，对每一个子问题只解一次，将其不同阶段的不同状态保存在一个二维数组中。
      与分治法最大的差别是: 适合于用动态规划法求解的问题，经分解后得到的子问题往往不是相互独立的(即下一子阶段的求解是建立在上一子阶段的解的基础上，进行进一步的求解).

   3. 适用情况
      能采用动态规划求解的问题一般要具有3个性质:
       + 最优化原理: 如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理
       + 无后效性: 即基本阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关
       + 有重叠子问题: 即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势)

   4. 求解的基本步骤
      动态规划所处理的问题是一个多阶段决策问题，一般由初始化状态开始，通过对中间阶段决策的选择，达到结束状态。这些决策形成了一个决策序列，同时确定了完成整个过程的一条活动路线（通常是求最优的活动路线）。动态规划的设计都有着一定的模式，一般要经历以下几个步骤:
       初始状态->决策1->决策2->...->决策n->结束状态
        (1). 划分阶段: 按照问题的时间或空间特征，把问题分为若干个阶段。在划分阶段时，注意划分后的阶段一定要是有序的或者是可排序的，否则问题就无法求解。
        (2). 确定状态和状态变量: 将问题发展到各个阶段时所牌的各种客观情况用不同的状态表示出来。当然，状态的选择要满足无后效性。
        (3). 确定决策并写出状态转移方程: 因为决策和状态转移有着天然的联系，状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。所以如果确定了决策，状态转移方程也就可写出。但事实上常常是反过来做，根据相邻两个阶段的状态之间的关系来确定决策方法和状态转移方程。
        (4). 寻找边界条件: 给出的状态转移方程是一个递推式，需要一个递推的终止条件或边界条件.
      一般只要解决一的阶段、状态和状态转移决策确定了，就可写出状态转移方程(包括边界条件).


      实际应用中可以按以下几个简化的步骤进行设计:
        + 分析最优解的性质，并刻画其结构特征
        + 递归的定义最优解
        + 以自底向上或自顶向下的记忆方法(备忘录法)计算出最优值
        + 根据计算最优值时得到的信息，构造问题的最优解

   5. 算法的实现说明
      动态规划的主要难点在于理论上的设计，也就是上面4个步骤的确定，一旦设计完成，实现部分就会非常简单。
      使用动态规划求解问题，最重要的就是确定动态规划三要素:
        (1). 问题的阶段
        (2). 每个阶段的状态
        (3). 从前一个阶段转化到后一个阶段之间的递归关系 
      递推关系必须是从次小的问题开始能不能较大的问题之间的转化，从这个角度来说，动态规划往往可以用递归程序来实现。不过因为递推可以充分利用前面保存的子问题的解来减少重复计算，所以对大规模问题来说，有递归不可比拟的优势，这也是动态规划算法的核心之处。
      确定了动态规划的这三要素，整个求解过程就可以用一个最优决策表来描述，最优决策表是一个二维表，其中行表示决策 的阶段，列表示问题状态，表格需要填写的数据一般对应些问题的某个阶段某个状态下的最优值，填表的过程就是根据递推关系，从1行1列开始，以行或者列优先的顺序，依次填写不及格最后根据整个表格的数据通过简单的取舍或者运算求得问题的最优解。
        f(n, m) = max{f(n-1, m), f(n-1, m-w[n])+P(n,m)}

    6. 动态规划算法基本框架 

          for (j = 1; j <= m; j=j+1)   // 第一阶段
             xn[j] = 初始值 

          for (i = n - 1; i >= 1; i=i-1) // 其他n-1个阶段
             for(j = 1; j>=f(i); j=j+1)  // f(i)与i有关的表达式
                xi[j] = j = max(或min) { g(xi-1[j1:j2]), ...., g(xi-1[jk:jk+1])};
  
          t = g(x1[j1:j2]);     // 由子问题的最优解求解整个问题的最优解的方案

          print(x1[j1);

          for(i = 2; i <= n-1; i=i+1) {
              t = t - xi - 1[ji]i;

              for (j = 1; j >= f(i); j=j+1) 
                  if (t = xi[ji])
                      break;
          }

-------------------------------------------------------------------------

三、 [ 贪心算法 ]:

-------------------------------------------------------------------------

四、 [ 回溯法 ]:
  
  
-------------------------------------------------------------------------

五、 [ 分支限界法 ]:
  
